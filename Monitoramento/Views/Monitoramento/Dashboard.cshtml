@model IEnumerable<MonitorDeServicos.Dominio.Entidade.Monitoramento>

@{
    ViewData["Title"] = "Monitor";

    var configuracao = ViewBag.ConfiguracaoSistema as MonitorDeServicos.Dominio.Entidade.ConfiguracaoSistema;
    var intervaloMinutos = configuracao?.IntervaloMinutos ?? 1; // Atribuindo valor padrão de 1 minuto caso o valor seja null
}

<div class="container mt-4">
    @if (configuracao != null)
    {
        <div class="alert alert-warning text-center mb-4">
            <i class="fas fa-info-circle"></i>
            <span>
                A consulta ocorre a cada <strong>@configuracao.IntervaloMinutos</strong> minutos.
                Se o número de falhas atingir <strong>@configuracao.FalhasParaNotificacao</strong>, uma notificação será enviada.
            </span>
            <p><strong>É necessário ficar nessa página para que as consultas sejam realizadas.</strong></p>
        </div>
    }

    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" onclick="consultarTodos()">Consultar Todos</button>
    </div>

    <table class="table table-striped table-hover table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Nome</th>
                <th>Tipo</th>
                <th>Endereço</th>
                <th>Status</th>
                <th>Qtd. Falhas</th>
                <th>Última Verificação</th>
                <th class="text-center">Ações</th>
            </tr>
        </thead>
        <tbody>
            @if (!Model.Any())
            {
                <tr>
                    <td colspan="7" class="text-center text-muted">Nenhum item para monitorar.</td>
                </tr>
            }
            else
            {
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Nome</td>
                        <td>@item.Tipo</td>
                        <td>@item.Endereco</td>
                        <td>
                            @if (item.UltimaVerificacao != null)
                            {
                                <span class="badge @(item.StatusOnline ? "bg-success" : "bg-danger")">
                                    @(item.StatusOnline ? "Online" : "Offline")
                                </span>
                            }
                        </td>
                        <td>
                            @if (item.UltimaVerificacao != null && !item.StatusOnline)
                            {
                                @item.ContadorDeFalha
                            }
                        </td>
                        <td>@(item.UltimaVerificacao != null ? item.UltimaVerificacao.Value.ToString("dd/MM/yyyy HH:mm") : string.Empty)</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-info" onclick="consultar(@item.Id)">Consultar</button>
                            <a asp-controller="LogMonitoramento" asp-action="Index" asp-route-idMonitoramento="@item.Id" class="btn btn-sm btn-outline-dark">Logs</a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<script>

    const intervaloMinutos = @intervaloMinutos;

        // Adiciona o elemento de loading à página
       function mostrarLoading() {
           // Cria o overlay
           const overlay = document.createElement('div');
           overlay.id = 'overlay';
           overlay.style.position = 'fixed';
           overlay.style.top = '0';
           overlay.style.left = '0';
           overlay.style.width = '100vw';
           overlay.style.height = '100vh';
           overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';  // Semitransparente
           overlay.style.zIndex = '999';  // Fica por cima de todos os elementos

           // Cria o elemento de loading
           const loadingElement = document.createElement('div');
           loadingElement.id = 'loading';
           loadingElement.innerText = 'Carregando...';
           loadingElement.style.position = 'absolute';
           loadingElement.style.top = '50%';
           loadingElement.style.left = '50%';
           loadingElement.style.transform = 'translate(-50%, -50%)';
           loadingElement.style.padding = '10px 20px';
           loadingElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
           loadingElement.style.color = 'white';
           loadingElement.style.borderRadius = '5px';
           loadingElement.style.fontSize = '18px';
           loadingElement.style.zIndex = '1000';  // Fica acima do overlay

           // Adiciona o overlay e o loadingElement ao body
           document.body.appendChild(overlay);
           document.body.appendChild(loadingElement);
       }

       // Remove o elemento de loading
       function esconderLoading() {
           const overlay = document.getElementById('overlay');
           const loadingElement = document.getElementById('loading');
           if (overlay) {
               overlay.remove();
           }
           if (loadingElement) {
               loadingElement.remove();
           }
       }

       let isConsulting = false;

       async function consultar(id) {
           if (isConsulting) return; // Evita iniciar uma nova consulta se já estiver em andamento

           isConsulting = true;
           mostrarLoading();

           try {
               const response = await fetch(`/Monitoramento/Consultar/${id}`);
               const data = await response.json();
               if (data.success) {
                   location.reload(); // Atualiza a página para refletir mudanças
               }
           } catch (error) {
               alert("Erro ao consultar o monitoramento.");
           } finally {
               esconderLoading();  // Remove o loading depois que a consulta terminar
               isConsulting = false;
           }
       }

       async function consultarTodos() {
           if (isConsulting) return; // Evita iniciar uma nova consulta se já estiver em andamento

           isConsulting = true;
           mostrarLoading();

           try {
               const response = await fetch(`/Monitoramento/ConsultarTodos`);
               if (response.ok) {
                   location.reload(); // Atualiza a página após a consulta
               } else {
                   alert("Erro ao consultar todos os monitoramentos.");
               }
           } catch {
               alert("Erro ao consultar todos os monitoramentos.");
           } finally {
               esconderLoading();  // Remove o loading depois que a consulta terminar
               isConsulting = false;
           }
       }

       console.log("Intervalo de consulta:", intervaloMinutos);

       // Verifique se o intervalo está sendo aplicado corretamente
       setInterval(async () => {
           console.log("Iniciando consulta...");
           await consultarTodos();
       }, intervaloMinutos * 60000); // 1 minuto em milissegundos

</script>

<style>
    #loading {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 10px 20px;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        border-radius: 5px;
        font-size: 18px;
    }
</style>
