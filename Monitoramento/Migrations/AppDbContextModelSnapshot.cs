// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitorDeServicos.Infra.Contexto;

#nullable disable

namespace Monitoramento.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.ConfiguracaoSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExecutarEmSegundoPlano")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FalhasParaNotificacao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervaloMinutos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConfiguracaoSistema");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExecutarEmSegundoPlano = false,
                            FalhasParaNotificacao = 3,
                            IntervaloMinutos = 5
                        });
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.LogMonitoramento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitoramentoId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TempoExecucao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonitoramentoId");

                    b.ToTable("LogsMonitoramento");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Monitoramento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContadorDeFalha")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("StatusOnline")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UltimaNotificacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UltimaVerificacao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Monitoramento");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Relacionamento.MonitoramentoWebhook", b =>
                {
                    b.Property<int>("MonitoramentoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WebhookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MonitoramentoId", "WebhookId");

                    b.HasIndex("WebhookId");

                    b.ToTable("MonitoramentoWebhook");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Webhook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeResponsavel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Webhooks");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.LogMonitoramento", b =>
                {
                    b.HasOne("MonitorDeServicos.Dominio.Entidade.Monitoramento", "Monitoramento")
                        .WithMany()
                        .HasForeignKey("MonitoramentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitoramento");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Relacionamento.MonitoramentoWebhook", b =>
                {
                    b.HasOne("MonitorDeServicos.Dominio.Entidade.Monitoramento", "Monitoramento")
                        .WithMany("MonitoramentoWebhooks")
                        .HasForeignKey("MonitoramentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitorDeServicos.Dominio.Entidade.Webhook", "Webhook")
                        .WithMany("MonitoramentoWebhooks")
                        .HasForeignKey("WebhookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitoramento");

                    b.Navigation("Webhook");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Monitoramento", b =>
                {
                    b.Navigation("MonitoramentoWebhooks");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Webhook", b =>
                {
                    b.Navigation("MonitoramentoWebhooks");
                });
#pragma warning restore 612, 618
        }
    }
}
