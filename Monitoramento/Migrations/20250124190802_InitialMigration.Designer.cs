// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitorDeServicos.Infra.Contexto;

#nullable disable

namespace Monitoramento.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250124190802_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.ConfiguracaoAplicacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FalhasParaNotificacao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervaloMinutos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConfiguracaoAplicacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FalhasParaNotificacao = 3,
                            IntervaloMinutos = 5
                        });
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.LogMonitoramento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("MensagemErro")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitoramentoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MonitoramentoId");

                    b.ToTable("LogsMonitoramento");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Monitoramento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfiguracaoAplicacaoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("StatusOnline")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UltimaVerificacao")
                        .HasColumnType("TEXT");

                    b.Property<int>("Versao")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoAplicacaoId");

                    b.ToTable("Monitoramento");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Webhook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonitoramentoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeResponsavel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonitoramentoId");

                    b.ToTable("Webhooks");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.LogMonitoramento", b =>
                {
                    b.HasOne("MonitorDeServicos.Dominio.Entidade.Monitoramento", "Monitoramento")
                        .WithMany()
                        .HasForeignKey("MonitoramentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitoramento");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Monitoramento", b =>
                {
                    b.HasOne("MonitorDeServicos.Dominio.Entidade.ConfiguracaoAplicacao", "ConfiguracaoAplicacao")
                        .WithMany()
                        .HasForeignKey("ConfiguracaoAplicacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfiguracaoAplicacao");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Webhook", b =>
                {
                    b.HasOne("MonitorDeServicos.Dominio.Entidade.Monitoramento", null)
                        .WithMany("Webhooks")
                        .HasForeignKey("MonitoramentoId");
                });

            modelBuilder.Entity("MonitorDeServicos.Dominio.Entidade.Monitoramento", b =>
                {
                    b.Navigation("Webhooks");
                });
#pragma warning restore 612, 618
        }
    }
}
